(defwidget time []
  (box :orientation "v"
    :class "time"
    :valign "start"
    (label :class "time-hour" :text hour)
    (label :class "time-min" :text min)
  )
)
(defpoll hour :interval "1s" "date '+%H'")
(defpoll min :interval "1s" "date '+%M'")

(defwidget top []
  (box :class "top"
    :orientation "v"
    :space-evenly false
    :valign "start"
    (time)
  )
)

(defvar wp1 "●")
(defvar wp2 "○")
(defvar wp3 "○")
(defvar wp4 "○")
(defvar wp5 "○")

(defwidget workspaces []
  (box :class "workspaces"
    :orientation "v"
    :space-evenly true
    :valign "center"
    :spacing 1
    (eventbox
      :cursor "pointer"
      (button :onclick "hyprctl dispatch workspace 1"
        (label
          :markup wp1
          :class "workspace_buttons"
        )
      )
    )
    (eventbox
      :cursor "pointer"
      (button :onclick "hyprctl dispatch workspace 2"
        (label
          :markup wp2
          :class "workspace_buttons"
        )
      )
    )
    (eventbox
      :cursor "pointer"
      (button :onclick "hyprctl dispatch workspace 3"
        (label
          :markup wp3
          :class "workspace_buttons"
        )
      )
    )
    (eventbox
      :cursor "pointer"
      (button :onclick "hyprctl dispatch workspace 4"
        (label
          :markup wp4
          :class "workspace_buttons"
        )
      )
    )
    (eventbox
      :cursor "pointer"
      (button :onclick "hyprctl dispatch workspace 5"
        (label
          :markup wp5
          :class "workspace_buttons"
        )
      )
    )
  )
)

(defwidget bottom []
  (box :class "bottom"
    :orientation "v"
    :space-evenly false
    :valign "end"
    (systray :pack-direction "ttb" :orientation "v" :prepend-new true)
  )
)

(defwidget bar []
  (box :class ""
    :orientation "v"
    :space-evenly true
    (top)
    (workspaces)
    (bottom)
  )
)

(defwindow bar
  :monitor 0
  :geometry (geometry :x "7px"
    :width "20px"
    :height "99%"
    :anchor "center left"
  )
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore false
  :reserve (struts :side "right" :distance "3%")
  :exclusive true
  (bar)
)
